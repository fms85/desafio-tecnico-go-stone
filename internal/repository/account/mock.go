// Code generated by mockery v2.33.0. DO NOT EDIT.

package account

import (
	context "context"

	entity "github.com/fms85/desafio-tecnico-go-stone/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	types "github.com/fms85/desafio-tecnico-go-stone/internal/domain/types"
)

// AccountRepositoryMock is an autogenerated mock type for the IAccountRepository type
type AccountRepositoryMock struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, accountInput
func (_m *AccountRepositoryMock) Get(ctx context.Context, accountInput types.AccountInput) (*entity.Account, error) {
	ret := _m.Called(ctx, accountInput)

	var r0 *entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccountInput) (*entity.Account, error)); ok {
		return rf(ctx, accountInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AccountInput) *entity.Account); ok {
		r0 = rf(ctx, accountInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AccountInput) error); ok {
		r1 = rf(ctx, accountInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *AccountRepositoryMock) GetAll(ctx context.Context) ([]*entity.Account, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Account, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *AccountRepositoryMock) Save(ctx context.Context, _a1 *entity.Account) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Account) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountRepositoryMock creates a new instance of AccountRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepositoryMock {
	mock := &AccountRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
