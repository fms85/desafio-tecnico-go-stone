// Code generated by mockery v2.33.0. DO NOT EDIT.

package transfer

import (
	context "context"

	entity "github.com/fms85/desafio-tecnico-go-stone/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	types "github.com/fms85/desafio-tecnico-go-stone/internal/domain/types"
)

// TransferRepositoryMock is an autogenerated mock type for the ITransferRepository type
type TransferRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, transferAggregation
func (_m *TransferRepositoryMock) Create(ctx context.Context, transferAggregation *types.TransferAggregation) error {
	ret := _m.Called(ctx, transferAggregation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.TransferAggregation) error); ok {
		r0 = rf(ctx, transferAggregation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, transferInput
func (_m *TransferRepositoryMock) Get(ctx context.Context, transferInput types.TransferInput) ([]*entity.Transfer, error) {
	ret := _m.Called(ctx, transferInput)

	var r0 []*entity.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.TransferInput) ([]*entity.Transfer, error)); ok {
		return rf(ctx, transferInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.TransferInput) []*entity.Transfer); ok {
		r0 = rf(ctx, transferInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.TransferInput) error); ok {
		r1 = rf(ctx, transferInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransferRepositoryMock creates a new instance of TransferRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransferRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransferRepositoryMock {
	mock := &TransferRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
